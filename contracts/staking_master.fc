#include "imports/stdlib.fc";
#include "jetton/jetton-utils.fc";
#include "constants.fc";

global cell data::items;
global cell data::rarity;
global cell data::users;
global cell data::staked_items;
global slice data::jetton_master;
global cell data::jetton_wallet_code;
global cell data::helper_code;
global slice data::admin;
global int data::valid_until;

global int context::op;
global int context::query_id;
global slice context::sender;

() load_data() impure {
    slice ds = get_data().begin_parse();
    slice dv = ds~load_ref().begin_parse();
    data::items = dv~load_dict();
    data::rarity = dv~load_dict();
    data::users = dv~load_dict();
    data::staked_items = dv~load_dict();
    data::jetton_master = ds~load_msg_addr();
    data::jetton_wallet_code = ds~load_ref();
    data::helper_code = ds~load_ref();
    data::admin = ds~load_msg_addr();
    data::valid_until = ds~load_uint(64);
}

() save_data() impure {
    set_data(begin_cell()
        .store_ref(begin_cell()
            .store_dict(data::items)
            .store_dict(data::rarity)
            .store_dict(data::users)
            .store_dict(data::staked_items)
        .end_cell())
        .store_slice(data::jetton_master)
        .store_ref(data::jetton_wallet_code)
        .store_ref(data::helper_code)
        .store_slice(data::admin)
        .store_uint(data::valid_until, 64)
    .end_cell());
}

(slice, int) dict_get?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT";
(cell, int) dict_delete?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTDEL";
(slice, slice, int) dict_get_next?(cell dict, int key_len, slice pivot) asm(pivot dict key_len -> 1 0 2) "DICTGETNEXT" "NULLSWAPIFNOT2";
(slice, slice, int) dict_get_min?(cell dict, int key_len) asm (-> 1 0 2) "DICTMIN" "NULLSWAPIFNOT2";

(cell, slice) get_stateinit_and_address_of_helper(slice item) inline {
    cell stateinit = begin_cell()
        .store_uint(0, 2)
        .store_dict(data::helper_code)
        .store_dict(begin_cell()
            .store_slice(my_address())
            .store_slice(item)
            .store_uint(0, 138)
        .end_cell())
        .store_uint(0, 1)
    .end_cell();
    slice address = begin_cell()
        .store_uint(4, 3)
        .store_int(0, 8)
        .store_uint(cell_hash(stateinit), 256)
    .end_cell().begin_parse();
    return (stateinit, address);
}

cell merge_dictionaries(cell self, cell other) {
    (slice key, slice value, int f?) = other.dict_get_min?(267);
    while (f?) {
        self~dict_set(267, key, value);
        (key, value, f?) = other.dict_get_next?(267, key);
    }
    return self;
}

cell subtract_dictionaries(cell self, cell other) {
    (slice key, slice value, int f?) = other.dict_get_min?(267);
    while (f?) {
        self~dict_delete?(267, key);
        (key, value, f?) = other.dict_get_next?(267, key);
    }
    return self;
}

() add_nft_count(int rare, slice user) impure {
    if (rare > 2) {
        return ();
    }
    (slice data, int f?) = data::users.dict_get?(267, user);
    if (~ f?) {
        data::users~dict_set(267, user, begin_cell()
            .store_uint(0, 16)
            .store_uint(0, 64)
            .store_coins(0)
            .store_uint(0, 16)
            .store_uint(0, 64)
            .store_coins(0)
        .end_cell().begin_parse());
        data = begin_cell()
            .store_uint(0, 16)
            .store_uint(0, 64)
            .store_coins(0)
            .store_uint(0, 16)
            .store_uint(0, 64)
            .store_coins(0)
        .end_cell().begin_parse();
    }
    int nft_count = data~load_uint(16);
    int start_from = data~load_uint(64);
    int extra_reward = data~load_coins();
    (slice reward, int f?) = data::rarity.dict_get?(16, begin_cell().store_uint(rare, 16).end_cell().begin_parse());
    int common_reward = reward~load_coins();
    int boost_reward = reward~load_coins();
    if (rare == 1) {
        if (nft_count == 9) {
            start_from = now();
        } elseif (nft_count >= 10) {
            extra_reward += (now() - start_from) * boost_reward * nft_count;
        }
        data = begin_cell()
            .store_uint(nft_count + 1, 16)
            .store_uint(start_from, 64)
            .store_coins(extra_reward)
            .store_slice(data)
        .end_cell().begin_parse();
        data::users~dict_set(267, user, data);
    } else {
        slice new_data = begin_cell()
            .store_uint(nft_count, 16)
            .store_uint(start_from, 64)
            .store_coins(extra_reward)
        .end_cell().begin_parse();
        int nft_count = data~load_uint(16);
        int start_from = data~load_uint(64);
        int extra_reward = data~load_coins();
        if (nft_count == 9) {
            start_from = now();
        } elseif (nft_count >= 10) {
            extra_reward += (now() - start_from) * boost_reward * nft_count;
        }
        data = begin_cell()
            .store_slice(new_data)
            .store_uint(nft_count + 1, 16)
            .store_uint(start_from, 64)
            .store_coins(extra_reward)
        .end_cell().begin_parse();
        data::users~dict_set(267, user, data);
    }
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_bits() < 96) {
        return ();
    }

    context::op = in_msg_body~load_uint(32);
    context::query_id = in_msg_body~load_uint(64);
    (_, context::sender) = in_msg_full.begin_parse().skip_bits(4).load_msg_addr();

    load_data();

    if (context::op == op::nft::ownership_assigned) {
        slice prev_owner = in_msg_body~load_msg_addr();
        slice forward_payload = in_msg_body;
        if (forward_payload~load_int(1)) {
            forward_payload = forward_payload~load_ref().begin_parse();
        }

        int stake? = 0;
        int option = 0;
        if (forward_payload.slice_bits() == 40) {
            int op = forward_payload~load_uint(32);
            (_, int f?) = data::items.dict_get?(267, context::sender);
            option = forward_payload~load_uint(8);
            stake? = (op == op::stake) & f? & ((option == 7) | (option == 14) | (option == 30));
        }
        if (now() > data::valid_until) {
            stake? = 0;
        }
        int failed? = ~ stake?;
        
        if (stake?) {
            if (msg_value >= 150000000) {
                (slice rare, int f?) = data::items.dict_get?(267, context::sender);
                int rare = rare~load_uint(16);
                add_nft_count(rare, prev_owner);
                (cell stateinit, slice address) = get_stateinit_and_address_of_helper(context::sender);
                send_raw_message(begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(address)
                    .store_coins(msg_value - 130000000)
                    .store_uint(6, 108)
                    .store_ref(stateinit)
                    .store_uint(op::process_stake, 32)
                    .store_uint(context::query_id, 64)
                    .store_slice(prev_owner)
                    .store_uint(option, 8)
                .end_cell(), 0);
                send_raw_message(begin_cell()
                    .store_uint(0x10, 6)
                    .store_slice(data::admin)
                    .store_coins(100000000)
                    .store_uint(0, 107)
                .end_cell(), 1);
                data::staked_items~dict_set(267, context::sender, prev_owner);
            } else {
                failed? = -1;
            }
        }
        
        if (failed?) {
            send_raw_message(begin_cell()
                .store_uint(0x18, 6)
                .store_slice(context::sender)
                .store_coins(0)
                .store_uint(0, 107)
                .store_uint(op::nft::transfer, 32)
                .store_uint(context::query_id, 64)
                .store_slice(prev_owner)
                .store_uint(0, 8)
            .end_cell(), 64);
        }
    }

    elseif (context::op == op::request_claim) {
        int return_item = in_msg_body~load_int(1);
        slice item = in_msg_body~load_msg_addr();
        slice staker = in_msg_body~load_msg_addr();
        int option = in_msg_body~load_uint(8);
        int time_passed = in_msg_body~load_uint(64);
        (_, slice address) = get_stateinit_and_address_of_helper(item);

        throw_unless(error::wrong_sender, equal_slices(context::sender, address));

        slice jetton_wallet_address = calculate_user_jetton_wallet_address(my_address(), data::jetton_master, data::jetton_wallet_code);

        (slice value, int f?) = data::items.dict_get?(267, item);
        int rare = value~load_uint(16);
        (slice reward, int f?) = data::rarity.dict_get?(16, begin_cell().store_uint(rare, 16).end_cell().begin_parse());
        int daily_reward = reward~load_coins();
        int boost_reward = reward~load_coins();
        int amount = daily_reward * (time_passed / const::day);

        (slice data, int f?) = data::users.dict_get?(267, staker);
        int nft_count = data~load_uint(16);
        int start_from = data~load_uint(64);
        int extra_reward = data~load_coins();
        int extra_amount = extra_reward;
        if (rare > 2) {
            extra_amount = 0;
        }

        elseif (rare == 1) {
            if ((nft_count == 10) & (return_item == 1)) {
                start_from = 0;
            } elseif ((nft_count >= 11) | ((nft_count >= 10) & (return_item == 1))) {
                extra_reward += (now() - start_from) * boost_reward * nft_count;
            }
            if (return_item == 0) {
                start_from = now();
            }
            extra_amount = extra_reward;
            extra_reward = 0;
            int f = 0;
            if (return_item) {
                f = -1;
            }
            data = begin_cell()
                .store_uint(nft_count + f, 16)
                .store_uint(start_from, 64)
                .store_coins(extra_reward)
                .store_slice(data)
            .end_cell().begin_parse();
            data::users~dict_set(267, staker, data);
        }

        else {
            slice new_data = begin_cell()
                .store_uint(nft_count, 16)
                .store_uint(start_from, 64)
                .store_coins(extra_reward)
            .end_cell().begin_parse();
            int nft_count = data~load_uint(16);
            int start_from = data~load_uint(64);
            int extra_reward = data~load_coins();
            if ((nft_count == 10) & (return_item == 1)) {
                start_from = 0;
            } elseif ((nft_count >= 11) | ((nft_count >= 10) & (return_item == 1))) {
                extra_reward += (now() - start_from) * boost_reward * nft_count;
            }
            if (return_item == 0) {
                start_from = now();
            }
            extra_amount = extra_reward;
            extra_reward = 0;
            int f = 0;
            if (return_item) {
                f = -1;
            }
            data = begin_cell()
                .store_slice(new_data)
                .store_uint(nft_count + f, 16)
                .store_uint(start_from, 64)
                .store_coins(extra_reward)
            .end_cell().begin_parse();
            data::users~dict_set(267, staker, data);
        }

        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(jetton_wallet_address)
            .store_coins(const::transfer_fees)
            .store_uint(0, 107)
            .store_uint(op::jetton::transfer, 32)
            .store_uint(context::query_id, 64)
            .store_coins(amount + extra_reward)
            .store_slice(staker)
            .store_uint(0, 8)
        .end_cell(), 1);

        if (return_item) {
            send_raw_message(begin_cell()
                .store_uint(0x18, 6)
                .store_slice(item)
                .store_coins(const::transfer_fees)
                .store_uint(0, 107)
                .store_uint(op::nft::transfer, 32)
                .store_uint(context::query_id, 64)
                .store_slice(staker)
                .store_uint(0, 8)
            .end_cell(), 1);
            data::staked_items~dict_delete?(267, item);

            send_raw_message(begin_cell()
                .store_uint(0x10, 6)
                .store_slice(data::admin)
                .store_coins((option == 30) ? 250000000 : 300000000)
                .store_uint(0, 107)
            .end_cell(), 1);
        }
    }

    elseif (context::op == op::admin_jettons_withdrawal) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::admin));

        int amount = in_msg_body~load_coins();
        slice jetton_wallet_address = calculate_user_jetton_wallet_address(my_address(), data::jetton_master, data::jetton_wallet_code);

        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(jetton_wallet_address)
            .store_coins(0)
            .store_uint(0, 107)
            .store_uint(op::jetton::transfer, 32)
            .store_uint(context::query_id, 64)
            .store_coins(amount)
            .store_slice(data::admin)
            .store_uint(0, 8)
        .end_cell(), 64);
    }

    elseif (context::op == op::admin_add_items) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::admin));

        cell items = in_msg_body~load_dict();
        data::items = merge_dictionaries(data::items, items);
    }

    elseif (context::op == op::admin_remove_items) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::admin));

        cell items = in_msg_body~load_dict();
        data::items = subtract_dictionaries(data::items, items);
    }

    elseif (context::op == op::admin_add_rarity) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::admin));

        cell rarity = in_msg_body~load_dict();
        data::rarity = merge_dictionaries(data::rarity, rarity);
    }

    elseif (context::op == op::admin_remove_rarity) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::admin));

        cell rarity = in_msg_body~load_dict();
        data::rarity = subtract_dictionaries(data::rarity, rarity);
    }

    elseif(context::op == op::admin_change_valid_until) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::admin));

        data::valid_until = in_msg_body~load_uint(64);
    }

    else {
        throw(0xffff);
    }

    save_data();
}

slice get_helper_address(slice item) method_id {
    load_data();
    (_, slice address) = get_stateinit_and_address_of_helper(item);
    return address;
}

cell get_staked_items() method_id {
    load_data();
    return data::staked_items;
}

int get_estimated_reward(slice item, int time_passed) method_id {
    load_data();
    (slice value, int f?) = data::items.dict_get?(267, item);
    int rare = value~load_uint(16);
    (slice reward, int f?) = data::rarity.dict_get?(16, begin_cell().store_uint(rare, 16).end_cell().begin_parse());
    int daily_reward = reward~load_coins();
    int boost_reward = reward~load_coins();
    int amount = daily_reward * (time_passed / const::day);
    return amount;
}

cell get_items() method_id {
    load_data();
    return data::items;
}

(cell, cell, cell, cell) get_dictionaries() method_id {
    load_data();
    return (data::items, data::rarity, data::users, data::staked_items);
}
