#include "imports/stdlib.fc";
#include "constants.fc";

global cell data::items;
global slice data::jetton_master;
global cell data::jetton_wallet_code;
global cell data::helper_code;

global int context::op;
global int context::query_id;
global slice context::sender;

() load_data() impure {
    slice ds = get_data().begin_parse();
    data::items = ds~load_dict();
    data::jetton_master = ds~load_msg_addr();
    data::jetton_wallet_code = ds~load_ref();
    data::helper_code = ds~load_ref();
}

() save_data() impure {
    set_data(begin_cell()
        .store_dict(data::items)
        .store_slice(data::jetton_master)
        .store_ref(data::jetton_wallet_code)
        .store_ref(data::helper_code)
    .end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_bits() < 96) {
        return ();
    }

    context::op = in_msg_body~load_uint(32);
    context::query_id = in_msg_body~load_uint(64);
    (_, context::sender) = in_msg_full.begin_parse().skip_bits(4).load_msg_addr();

    load_data();

    if (context::op == op::ownership_assigned) {

    }

    elseif (context::op == op::request_claim) {

    }

    else {
        throw(0xffff);
    }

    save_data();
}
