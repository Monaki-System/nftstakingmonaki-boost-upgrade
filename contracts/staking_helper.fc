#include "imports/stdlib.fc";
#include "constants.fc";

global slice data::master;
global slice data::item;
global slice data::staker;
global int data::staked_at;
global int data::option;

global int context::op;
global int context::query_id;
global slice context::sender;

() load_data() impure {
    slice ds = get_data().begin_parse();
    data::master = ds~load_msg_addr();
    data::item = ds~load_msg_addr();
    data::staker = ds~load_msg_addr();
    data::staked_at = ds~load_uint(64);
    data::option = ds~load_uint(8);
}

() save_data() impure {
    set_data(begin_cell()
        .store_slice(data::master)
        .store_slice(data::item)
        .store_slice(data::staker)
        .store_uint(data::staked_at, 64)
        .store_uint(data::option, 8)
    .end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_bits() < 96) {
        return ();
    }

    context::op = in_msg_body~load_uint(32);
    context::query_id = in_msg_body~load_uint(64);
    (_, context::sender) = in_msg_full.begin_parse().skip_bits(4).load_msg_addr();

    load_data();

    if (context::op == op::claim) {
        throw_unless(error::not_enough_value, msg_value >= const::transfer_fees * 3);

        throw_if(error::not_staked, data::staked_at == 0);
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::staker));
        int time_passed = now() - data::staked_at;
        throw_unless(error::too_early, time_passed >= (data::option * const::day));

        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(data::master)
            .store_coins(0)
            .store_uint(0, 107)
            .store_uint(op::request_claim, 32)
            .store_uint(context::query_id, 64)
            .store_slice(data::item)
            .store_slice(data::staker)
            .store_uint(data::option, 8)
        .end_cell(), 64);

        data::staker = "";
        data::option = 0;
        data::staked_at = 0;
    }

    elseif (context::op == op::process_stake) {
        throw_unless(error::already_staked, data::staked_at == 0);
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::master));

        data::staker = in_msg_body~load_msg_addr();
        data::option = in_msg_body~load_uint(8);
        data::staked_at = now();
    }

    else {
        throw(0xffff);
    }

    save_data();
}

(slice, slice, slice, int, int) get_contract_data() method_id {
    load_data();
    return (data::master, data::item, data::staker, data::staked_at, data::option);
}
